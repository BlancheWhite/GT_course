TryExcept:

mystery_value = 9

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Create a program that divides 10 by mystery_value and 
#prints the result. In the case that mystery_value is 
#equal to 0, print "Can't divide by zero". If for any other
#reason the operation fails, print "Not possible".
#
#You may not use any conditionals or the type() function.


#Add your code here!
try:
    division = 10 / mystery_value
    print(division)
except ZeroDivisionError:
    print("Can't divide by zero")
except:
    print("Not possible")


GetInteger:

#This exercise is identical to the previous exercise,
#except that instead of printing "Cannot convert!" when my_var
#cannot be converted to an integer, you should instead return
#the error message that results. For a reminder of how to
#access the error message in the except block, check out
#3.5.3, specifically CatchingASpecificError-4.py from 3.5.3.3
#and CatchingMultipleSpecificErrors-5.py from 3.5.3.4.
#
#Write a function called get_integer that takes as input one
#variable, my_var. If my_var can be converted to an integer,
#do so and return that integer. If my_var cannot be converted
#to an integer, return the error message that results from
#attempting to do so.
#
#Do not use any conditionals or the type() function.


#Write your function here!
def get_integer(my_var):
    try:
        my_var = int(my_var)
        return my_var
    except Exception as error:
        return error


#You can use the lines below to test out your function. When
#the function is written correctly, the output of these three
#lines should be:
#5
#invalid literal for int() with base 10: 'Boggle.'
#5
print(get_integer("5"))
print(get_integer("Boggle."))
print(get_integer(5.1))


DividingMysteryValue:

mystery_value = 0

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Write a program that divides mystery_value by mystery_value
#and prints the result. If that operation results in an
#error, divide mystery_value by (mystery_value + 5) and then
#print the result. If that still fails, multiply mystery_value
#by 5 and print the result. You may assume one of those three
#things will work.
#
#You may not use any conditionals.
#
#Hint: You're going to want to test one try/except structure
#inside another! Think carefully about whether the second
#one should go inside the try block or the except block.


#Add your code here!
try:
    result = mystery_value / mystery_value
    print(result)

except:
    try:
        result = mystery_value / (mystery_value + 5)
        print(result)

    except:
        result = mystery_value * 5
        print(result)



ListOfIteration:

given_items = ["one", "two", 3, 4, "five", ["six", "seven", "eight"]]

#Write a program that iterates through the items in the
#given list. For each item, you should attempt to iterate
#through the item and print each character seperately. 
#
#If this second part fails, print "Not iterable" -- but
#even if the second part fails, you should still go on
#to the next item in the list.
#
#Hint: Although we'll cover lists more in Unit 4, all
#you need to know right now is that this syntax will run
#a loop over a list, a string, or any other iterable
#type of information:
#
#  for item in given_items:
#
#To iterate over the items in 'item', you can do the
#same thing: for subitem in item:
#
#Start out by building the nested for-each loops that
#you'll need. Then, identify where the error is
#occurring to figure out where to put the try-except
#structure.
#
#This one's tricky, but you can do it!


#Add your code here!

for item in given_items:
    try:
        for subitem in item:
            print(subitem)
    except:
        print("Not iterable")

IdealGasLaw3:

#In Chapter 3.4, we wrote a function called find_pressure
#that calculated pressure given number of moles,
#temperature, volume, and optionally, a value for R. If no
#value was given for R, we assumed its value should be
#0.082057.
#
#However, as written, that function could crash: what about
#when the user enters a Volume of 0? That would cause a
#ZeroDivisonError! (In addition to breaking the laws of
#physics, but there's no Python error for that.)
#
#Revise that find_pressure function to catch that error. If
#that error occurs, return the string "Volume must be
#greater than 0." Otherwise, the function should work just
#as it did before.
#
#Feel free to copy your answer to that exercise and work
#from there. If you'd prefer to start from scratch, remember:
#you're creating a function called find_pressure that returns
#a value for pressure given variables n, T, V, and optionally
#R, according to this formula:
#
# Pressure = (nRT) / V
#
#You may not use a conditional. R should have a default value
#of 0.082057.


#Write your function here!
def find_pressure(n, T, V, R = 0.082057):
    try:
        a = (n * R * T) / V
    except:
        return "Volume must be greater than 0."
    else:
        return a


#You may use these lines to test your function. With the
#values initially supplied here, your function should return
#"Volume must be greater than 0."
test_n = 10
test_T = 298
test_V = 0
test_R = 62.364 #Torr!
print("Result:", find_pressure(test_n, test_T, test_V, R = test_R))


WordCount:

#We've come a long way in this unit! You've learned about
#conditionals, loops, functions, and error handling. To end
#the unit, let's do a couple problems that tie all these
#concepts together.
#
#Write a function called word_count. word_count takes as
#input a string called my_string, and returns as output the
#number of words in the string. For the purposes of this
#problem, you can assume that every space indicates a new
#word; so, the number of words should be one more than the
#number of spaces. You may also assume that any strings are
#not empty, so there should always be at least one word if
#my_string is a string.
#
#Note, though, that it could be the case that a non-string
#is accidentally passed in as the argument for my_string. If
#that happens, an error will arise. If such an error arises,
#you should instead return "Not a string". Otherwise,
#return an integer representing the number of words in the
#string.


#Write your function here!
def word_count(my_string):
    count = 1
    try:
        for element in my_string:
            if element == " ":
                count += 1
    except TypeError:
        return "Not a string"
    return count


print("Word Count:", word_count("Four words are here!"))
print("Word Count:", word_count("One."))
print("Word Count:", word_count("There are seven words in this sentence."))
print("Word Count:", word_count(5))
print("Word Count:", word_count(5.1))
print("Word Count:", word_count(True))



WordCount2:

#Now let's make things a little more challenging.
#
#Last exercise, you wrote a function called word_count that
#counted the number of words in a string essentially by
#counting the spaces. However, if there were multiple spaces
#in a row, it would incorrectly add additional words. For
#example, it would have counted the string "Hi   David" as
#4 words instead of 2 because there are two additional
#spaces.
#
#Revise your word_count method so that if it encounters
#multiple consecutive spaces, it does *not* count an
#additional word. For example, these three strings should
#all be counted as having two words:
#
# "Hi David"
# "Hi   David"
# "Hi                 David"
#
#Other than ignoring consecutive spaces, the directions are
#the same: write a function called word_count that returns an
#integer representing the number of words in the string, or
#return "Not a string" if the input isn't a string. You may
#assume that if the input is a string, it starts with a
#letter word instead of a space.

#Write your function here!
def word_count(my_string):
    try:
        my_string = " ".join(my_string.split())
        count = my_string.count(" ") + 1
    except:
        return "Not a string"
    return count


        

    

#Below are some lines of code that will test your function.
#You can change the value of the variable(s) to test your
#function with different inputs.
#
#If your function works correctly, this will originally
#print:
#Word Count: 4
#Word Count: 2
#Word Count: Not a string
#Word Count: Not a string
#Word Count: Not a string

print("Word Count:", word_count("Four words are here!"))
print("Word Count:", word_count("Hi   David"))
print("Word Count:", word_count(5))
print("Word Count:", word_count(5.1))
print("Word Count:", word_count(True))



WordLength:

#This will be the largest, most authentic program you've
#written so far. It will require everything you've learned
#and should take some time to test and debug. Be patient,
#you can do it!
#
#Write a function called average_word_length that takes as
#input a string called my_string, and returns as output the
#average length of the words in the string.
#
#In writing this function, note the following:
#
# - You should account for consecutive spaces. A string like
#   "Hi   Lucy" is two words with an average length of 3.0
#   characters.
# - You should not assume the string starts with a letter.
#   A string like "  David" has one word with an average
#   length of 5.0 characters.
# - You should not count punctuation marks toward the
#   length of a word. A string like "Hi, Lucy" has two
#   words with an average length of 3.0 characters: the ,
#   after "Hi" does not count as a character in the word.
#   The only punctuation marks you need to handle are
#   these: . , ! ?
# - You may assume the only characters in the string are
#   letters, the punctuation marks listed above, and spaces.
# - If my_string is not a string, you should instead return
#   the string, "Not a string".
# - If there are no words in my_string, you should instead
#   return the string, "No words". This could happen for
#   strings like "" (an empty string) and ".,!?" (a string
#   of only punctuation marks). You may assume that any
#   of these punctuation marks will always be followed by
#   at least one space.
#
#Here are a few hints that might help you:
#
# - You can peak at the first character in my_string with
#   my_string[0]. If my_string is "Hi, Lucy", then the value
#   of my_string[0] is "H". You don't have to do this, but
#   you can if you want.
# - There are lots of ways you can do this. If you're
#   stuck, try taking a step back and thinking about the
#   problem from a fresh perspective.
# - If you're still stuck, try counting words and letters
#   separately, and worrying about average length only
#   after both have been counted.
# - The word count should equal the number of letters that
#   come immediately after a space or the start of the
#   string. The character count should simply equal the
#   number of characters besides spaces and punctuation
#   marks. The average word length should be character
#   count divided by word count.


#Write your function here!
def average_word_length(my_string):
    try:
        my_string = " ".join(my_string.split())
        word = my_string.count(" ") + 1
        characters = 0
        for element in my_string:
            if not element == "," and not element == "." and not element == "?" and not element == "!" and not element == " ":
                characters += 1
            if characters == 0:
                return "No words"            
    except:
        return "Not a string"
    return characters / word
#When your function works, the following code should
#output:
#2.0
#3.0
#4.0
#Not a string
#No words

print(average_word_length("Hi"))
print(average_word_length("Hi, Lucy"))
print(average_word_length("   What   big spaces  you    have!"))
print(average_word_length(True))
print(average_word_length("?!?!?! ... !"))


ListIndices:

a_list = [1, 2, 3, 4, 5]
list_index = 7

#-----------------------------------------------------------
#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#In this problem, we're going to use some unfamiliar syntax.
#You'll learn more about this syntax in Unit 4. For now,
#though, you don't need to understand the syntax. All you
#need to know is that right now, this code will cause an
#error with the values supplied above.
#
#Revise this code so that this error is caught, and the
#message "Invalid index!!" is printed. However, your revision
#must meet these requirements, too:
#
# - If the values of the variables above are changed so
#   that the error doesn't occur, the program should behave
#   the same way that it does now.
# - The two first and last lines, "Accessing index..." and
#   "Done!", should print whether or not an error occurs.
# - If a *different* error occurs from the one that arises
#   initially, your code should instead print "Unknown
#   error!"
#
#HINT: You won't be able to do this without running the code
#first and seeing what the error is. So, try it out first!

#Revise this code:

print("Accessing index...")
try:
    result = a_list[list_index]
except IndexError:
    print("Invalid index!!")
except:
    print("Unknown error!")
else:
    print("Value at index:", result)
finally:
    print("Done!")



