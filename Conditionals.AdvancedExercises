3.2.7 BryanCranston

story = "A"
text = "B"
role = "C"
director = "D"
cast = "F"

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.
#
#In Bryan Cranston's autobiography, he describes how after
#his success on Breaking Bad, he developed a scoring system
#for evaluating new scripts that he received.
#
#First, he would assign the script a grade -- A, B, C, D, or
#F -- in each of five categories: Story, Text, Role, Director,
#and Cast.
#
#Then, he would tally those grades into a total score for the
#script, according to the following chart:
#
#            A   B   C   D   F
# Story     +6  +5  +4  +2  +0
# Text      +5  +4  +3  +1  +0
# Role      +4  +3  +2  +1  +0
# Director  +3  +2  +1  +0  +0
# Cast/Misc +2  +1  +0  +0  +0
#
#For example: an A story, B text, C role, D directory, and
#F cast would get a score of 12: +6 for the story, +4 for the
#text, +2 for the role, +0 for the director, and +0 for the
#cast.
#
#Then, based on that score, the script would be assigned a
#category (note these are slightly different from the image
#because we've excluded the time variable):
#
# 20: Perfect score
# 17 to 19: Must do
# 14 to 16: Seriously consider
# 12 to 13: On the bubble
# 11 or below: Pass
#
#The variables above give the letter grades assigned to each
#of the five components. Write a program that calculates the
#total score he would assign to the script represented by
#these variables. Then on the next line, print the category
#he would assign to that script. For example, for the values
#above, this program would print:
#
#12
#Pass
#
#HINT: This is a *long* program. It's not particularly
#complex -- you're doing the same thing over and over, However,
#that 'same thing' required 4-8 lines each time you do it. Our
#answer is 46 lines long! So, don't think you're off-track just
#because you're writing a lot of lines.

totalScore = 0
#Add your code here!

if story == "A":
    totalScore += 6
elif story == "B":
    totalScore += 5
elif story == "C":
    totalScore += 4
elif story == "D":
    totalScore += 2
else:
    totalScore += 0    
    
if text == "A":    
    totalScore += 5
elif text == "B":
    totalScore += 4
elif text == "C":
    totalScore += 3
elif text == "D":
    totalScore += 1
else:
    totalScore += 0    
    
   
if role == "A":    
   totalScore += 4
elif role == "B":
    totalScore += 3
elif role == "C":
    totalScore += 2
elif role == "D":
    totalScore += 1
else:
    totalScore += 0
          
if director == "A":            
    totalScore += 3         
elif director == "B":
    totalScore += 2
elif director == "C":
    totalScore += 1
else:
    totalScore += 0    
       
if cast == "A":        
    totalScore += 2
elif cast == "B":
    totalScore += 1
else:
    totalScore += 0                    
                
print(totalScore)           
if totalScore == 20: 
    print("Perfect score")
elif totalScore >= 17 and totalScore <= 19:
    print("Must do")
elif totalScore >= 14 and totalScore <= 16:
    print("Seriously consider")
elif totalScore >= 12 and totalScore <= 13:
    print("On the bubble")
else:
    print("Pass")


Sample_answer using dictionaries:

story = "A"
text = "B"
role = "C"
director = "D"
cast = "F"

#The shorter method uses a topic we won't cover for a
#while: dictionaries. Dictionaries are a way for us to
#easily store how many points correspond to each letter
#grade even though they differ from category to category.

#First, we want to create the dictionaries that store these
#scores:

story_dict = {"A": 6, "B": 5, "C": 4, "D": 2, "F": 0}
text_dict = {"A": 5, "B": 4, "C": 3, "D": 1, "F": 0}
role_dict = {"A": 4, "B": 3, "C": 2, "D": 1, "F": 0}
director_dict = {"A": 3, "B": 2, "C": 1, "D": 0, "F": 0}
cast_dict = {"A": 2, "B": 1, "C": 0, "D": 0, "F": 0}

#In story_dict, 6 is associated with "A", so the right
#number of points are assigned to an "A" story, and that
#differs from the points assigned to "A" in text_dict.
#
#From here, calculating our total_score is straightforward:

total_score = 0
total_score += story_dict[story]
total_score += text_dict[text]
total_score += role_dict[role]
total_score += director_dict[director]
total_score += cast_dict[cast]
print(total_score)

#This syntax, which we'll cover in chapter 4.5, says, "Find
#the value associated with story in story_dict." The value
#associated with "A" in story_dict is 6, so 6 is added.
#
#There really is no easier way to do the last part, though:
if total_score >= 20:
    print("Perfect score")
elif total_score >=17:
    print("Must do")
elif total_score >= 14:
    print("Seriously consider")
elif total_score >= 12:
    print("On the bubble")
else:
    print("Pass")



MoonMoon:

phase = "Full"
distance = 225000
date = 15
eclipse = True

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#There are (at least) three special types of full moons:
#
# - Super Moon: the full moon occurs when the moon is at its
#   closest approach to earth (less than 230,000km away).
# - Blue Moon: the second full moon in a calendar month. In
#   other words, any full moon on the 29th, 30th, or 31st of
#   a month.
# - Blood Moon: a lunar eclipse during a full moon.
#
#Write a program that will print out the type of moon --
#"Full Moon", "Super Moon", "Blue Moon", "Blood Moon", based
#on the values of the variables above. Note that for the moon
#to be any of these special kinds of moons, it must also be
#full.
#
#Note, though, that multiple modifiers can be true at the same
#time. We could have a Super Blue Moon, a Blue Blood Moon, or
#even a Super Blue Blood Moon.
#
#Always print those modifiers in that order. If any of these
#special modifiers is present, do not include the word "Full".
#If none of them are present, but the moon is Full, then print
#"Full Moon". If none of them are present at all, print "Moon".


#Add your code here!
if phase != "Full":
    print("Moon")
else:
    if distance < 230000:
        if date >= 29:
            if eclipse:
                print("Super Blue Blood Moon")
            else:
                print("Super Blue Moon")
        else:
            if eclipse:
                print("Super Blood Moon")
            else:
                print("Super Moon")
    else:
        if date >= 29:
            if eclipse:
                print("Blue Blood Moon")
            else:
                print("Blue Moon")
        else:
            if eclipse:
                print("Blood Moon")
            else:
                print("Full Moon")
                
  
  Sample_answer received:
  
  phase = "Full"
distance = 228000
date = 31
eclipse = True

#There are a few ways we could do this. Here's mine. First,
#I'm going to start by creating a result string with the
#value "Moon". I know that no matter what, the last word of
#my output should be "Moon":
result = "Moon"

#Next, I only care about any of these values if the phase is
#"Full". So, I'll go ahead and check that:
if phase == "Full":
    
    #Next, I want to check whether to add "Super", "Blue",
    #and "Blood". If I want to add "Blood", though, I want it
    #to be closest to the word "Moon", so I'm going to check
    #that first:
    if eclipse:
        result = "Blood " + result
        
    #Next, I''ll check if the moon is "Blue":
    if date >= 29:
        
        #Note that by doing this second, I'm adding "Blue"
        #to whatever happened after checking if this was a
        #Blood Moon. If line 22 ran, result is now "Blood
        #Moon", and I'm adding "Blue" to the front to get
        #"Blue Blood Moon":
        result = "Blue " + result
        
    #Then, I'll check if the moon qualifies as a Super Moon:
    if distance < 230000:
        
        #Again, because I'm adding "Super" to the beginning,
        #it doesn't matter if "Blood" and/or "Blue" were
        #added:
        result = "Super " + result
    
    #The last part is a little tricky: I need to add "Full"
    #to the front if I didn't add Blue, Blood, or Super.
    #There are ways to check the value of 'result' to see if
    #those things were added, but since we haven't learned
    #those yet, we'll go with this way.
    #
    #Here, we re-check the conditions that would have
    #caused us to add "Super", "Blue", or "Blood" to our
    #result. If none are true, then we change result to
    #"Full Moon".
    if not (eclipse or date >= 29 or distance < 230000):
        result = "Full Moon"

#Finally, we present the result. If the phase wasn't "Full",
#then we skip right from line 15 to here. That's why we gave
#result the initial value of "Moon" in the first place.
print(result)

